// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(13)
            {
                { typeof(global::GameReadyReq), 0 },
                { typeof(global::GameReadyRes), 1 },
                { typeof(global::GameStartRes), 2 },
                { typeof(global::InputActionAction), 3 },
                { typeof(global::InputMoveAction), 4 },
                { typeof(global::LockstepConformReq), 5 },
                { typeof(global::LockstepConformRes), 6 },
                { typeof(global::LockstepPacketReq), 7 },
                { typeof(global::LockstepPacketRes), 8 },
                { typeof(global::LoginRes), 9 },
                { typeof(global::NoAction), 10 },
                { typeof(global::PlayerJoinRes), 11 },
                { typeof(global::PlayerLeaveRes), 12 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.GameReadyReqFormatter();
                case 1: return new MessagePack.Formatters.GameReadyResFormatter();
                case 2: return new MessagePack.Formatters.GameStartResFormatter();
                case 3: return new MessagePack.Formatters.InputActionActionFormatter();
                case 4: return new MessagePack.Formatters.InputMoveActionFormatter();
                case 5: return new MessagePack.Formatters.LockstepConformReqFormatter();
                case 6: return new MessagePack.Formatters.LockstepConformResFormatter();
                case 7: return new MessagePack.Formatters.LockstepPacketReqFormatter();
                case 8: return new MessagePack.Formatters.LockstepPacketResFormatter();
                case 9: return new MessagePack.Formatters.LoginResFormatter();
                case 10: return new MessagePack.Formatters.NoActionFormatter();
                case 11: return new MessagePack.Formatters.PlayerJoinResFormatter();
                case 12: return new MessagePack.Formatters.PlayerLeaveResFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class GameReadyReqFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameReadyReq>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameReadyReq value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.Ready);
        }

        public global::GameReadyReq Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Ready__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Ready__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameReadyReq();
            ____result.Ready = __Ready__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameReadyResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameReadyRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameReadyRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.Ready);
        }

        public global::GameReadyRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Ready__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Ready__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameReadyRes();
            ____result.Ready = __Ready__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameStartResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameStartRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameStartRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(0);
        }

        public global::GameStartRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameStartRes();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InputActionActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::InputActionAction>
    {


        public void Serialize(ref MessagePackWriter writer, global::InputActionAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<CharacterAction>().Serialize(ref writer, value.characterAction, options);
        }

        public global::InputActionAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __characterAction__ = default(CharacterAction);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __characterAction__ = formatterResolver.GetFormatterWithVerify<CharacterAction>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::InputActionAction();
            ____result.characterAction = __characterAction__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InputMoveActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::InputMoveAction>
    {


        public void Serialize(ref MessagePackWriter writer, global::InputMoveAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.moveX);
            writer.Write(value.moveY);
        }

        public global::InputMoveAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __moveX__ = default(float);
            var __moveY__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __moveX__ = reader.ReadSingle();
                        break;
                    case 1:
                        __moveY__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::InputMoveAction();
            ____result.moveX = __moveX__;
            ____result.moveY = __moveY__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LockstepConformReqFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LockstepConformReq>
    {


        public void Serialize(ref MessagePackWriter writer, global::LockstepConformReq value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.LockstepTurnID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerID, options);
            writer.Write(value.SeatID);
        }

        public global::LockstepConformReq Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LockstepTurnID__ = default(int);
            var __PlayerID__ = default(string);
            var __SeatID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LockstepTurnID__ = reader.ReadInt32();
                        break;
                    case 1:
                        __PlayerID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __SeatID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LockstepConformReq();
            ____result.LockstepTurnID = __LockstepTurnID__;
            ____result.PlayerID = __PlayerID__;
            ____result.SeatID = __SeatID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LockstepConformResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LockstepConformRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::LockstepConformRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.LockstepTurnID);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerID, options);
            writer.Write(value.SeatID);
        }

        public global::LockstepConformRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LockstepTurnID__ = default(int);
            var __PlayerID__ = default(string);
            var __SeatID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LockstepTurnID__ = reader.ReadInt32();
                        break;
                    case 1:
                        __PlayerID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __SeatID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LockstepConformRes();
            ____result.LockstepTurnID = __LockstepTurnID__;
            ____result.PlayerID = __PlayerID__;
            ____result.SeatID = __SeatID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LockstepPacketReqFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LockstepPacketReq>
    {


        public void Serialize(ref MessagePackWriter writer, global::LockstepPacketReq value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.LockstepTurnID);
            writer.Write(value.ActionId);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ActionData, options);
        }

        public global::LockstepPacketReq Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LockstepTurnID__ = default(int);
            var __ActionId__ = default(int);
            var __ActionData__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __LockstepTurnID__ = reader.ReadInt32();
                        break;
                    case 1:
                        __ActionId__ = reader.ReadInt32();
                        break;
                    case 2:
                        __ActionData__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LockstepPacketReq();
            ____result.LockstepTurnID = __LockstepTurnID__;
            ____result.ActionId = __ActionId__;
            ____result.ActionData = __ActionData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LockstepPacketResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LockstepPacketRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::LockstepPacketRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerID, options);
            writer.Write(value.SeatID);
            writer.Write(value.LockstepTurnID);
            writer.Write(value.ActionId);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ActionData, options);
        }

        public global::LockstepPacketRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerID__ = default(string);
            var __SeatID__ = default(int);
            var __LockstepTurnID__ = default(int);
            var __ActionId__ = default(int);
            var __ActionData__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SeatID__ = reader.ReadInt32();
                        break;
                    case 2:
                        __LockstepTurnID__ = reader.ReadInt32();
                        break;
                    case 3:
                        __ActionId__ = reader.ReadInt32();
                        break;
                    case 4:
                        __ActionData__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LockstepPacketRes();
            ____result.PlayerID = __PlayerID__;
            ____result.SeatID = __SeatID__;
            ____result.LockstepTurnID = __LockstepTurnID__;
            ____result.ActionId = __ActionId__;
            ____result.ActionData = __ActionData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LoginResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LoginRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::LoginRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerID, options);
            writer.Write(value.SeatID);
        }

        public global::LoginRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerID__ = default(string);
            var __SeatID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SeatID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LoginRes();
            ____result.PlayerID = __PlayerID__;
            ____result.SeatID = __SeatID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NoActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::NoAction>
    {


        public void Serialize(ref MessagePackWriter writer, global::NoAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(0);
        }

        public global::NoAction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::NoAction();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerJoinResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PlayerJoinRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::PlayerJoinRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerID, options);
            writer.Write(value.SeatID);
        }

        public global::PlayerJoinRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerID__ = default(string);
            var __SeatID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SeatID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::PlayerJoinRes();
            ____result.PlayerID = __PlayerID__;
            ____result.SeatID = __SeatID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerLeaveResFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::PlayerLeaveRes>
    {


        public void Serialize(ref MessagePackWriter writer, global::PlayerLeaveRes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PlayerID, options);
            writer.Write(value.SeatID);
        }

        public global::PlayerLeaveRes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __PlayerID__ = default(string);
            var __SeatID__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __PlayerID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SeatID__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::PlayerLeaveRes();
            ____result.PlayerID = __PlayerID__;
            ____result.SeatID = __SeatID__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

